pipeline {
    agent any
    parameters {
        dynamicReference(name: 'CATEGORY', description: 'Select categories to auto-fill pipeline codes')
        dynamicReference(name: 'PIPELINE_CODES', description: 'Auto-filled based on selected categories')
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'Build Version')
        booleanParam(name: 'DEPLOY_TO_PROD', defaultValue: false, description: 'Deploy to Production?')
        choice(name: 'ENVIRONMENT', choices: ['Select', 'DEV', 'STAGING', 'PROD'], description: 'Select Environment')
        string(name: 'CUSTOM_PARAM', defaultValue: '', description: 'Custom parameter')
    }
    stages {
        stage('Load Pipelines') {
            steps {
                script {
                    def jsonFile = new File('/var/jenkins_home/pipelineConfig.json')
                    if (!jsonFile.exists()) {
                        error("❌ Pipeline configuration file not found!")
                    }
                    def pipelineMap = new groovy.json.JsonSlurper().parseText(jsonFile.text)
                    env.PIPELINE_MAP = groovy.json.JsonOutput.toJson(pipelineMap)
                }
            }
        }
        stage('Validate & Trigger Pipelines') {
            steps {
                script {
                    def pipelineMap = new groovy.json.JsonSlurper().parseText(env.PIPELINE_MAP)
                    def selectedPipelines = params.PIPELINE_CODES.tokenize(',')
                    def missingParams = []

                    if (selectedPipelines.isEmpty()) {
                        error("❌ No pipelines selected. Please select at least one.")
                    }

                    selectedPipelines.each { pipelineCode ->
                        def pipelineInfo = pipelineMap[pipelineCode]
                        if (!pipelineInfo) {
                            error("❌ Invalid pipeline code: ${pipelineCode}")
                        }

                        // Check required parameters
                        pipelineInfo.params.each { param ->
                            if (!params[param] || params[param] == "Select") {
                                missingParams << "⚠️ Missing '${param}' for pipeline '${pipelineCode}'"
                            }
                        }
                    }

                    if (missingParams) {
                        error("❌ Missing required parameters:\n${missingParams.join('\n')}")
                    }

                    selectedPipelines.each { pipelineCode ->
                        def pipelineInfo = pipelineMap[pipelineCode]
                        def paramList = pipelineInfo.params.collect { paramName ->
                            return [name: paramName, value: params[paramName]]
                        }

                        echo "✅ Triggering ${pipelineInfo.name} with parameters: ${paramList}"
                        build job: pipelineInfo.name, wait: false, parameters: paramList
                    }
                }
            }
        }
    }
}
